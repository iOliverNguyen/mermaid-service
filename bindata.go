package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xef\x72\xdb\xb6\xb2\xff\xae\xa7\xd8\x30\xbd\x15\x35\x16\x29\xc9\x4e\xdb\x54\x16\x95\xfa\x5f\x9a\xde\xb1\x6f\x3b\x37\xce\xdc\x9b\x71\x3d\x0d\x44\xae\x44\xc4\x20\xc0\x02\xa0\x6c\xd5\xf1\x8b\x9c\x0f\xe7\xe1\xce\x93\x9c\x01\x48\x4a\x14\x49\x29\x69\xe6\xe8\x83\x45\x01\xbb\x8b\xdf\xfe\x5f\xd0\x93\x67\xe7\xbf\x9e\x5d\xbf\xff\xed\x02\x62\x9d\xb0\x69\x67\x62\xbe\x80\x11\xbe\x08\x1c\xe4\xce\xb4\xd3\x99\xc4\x48\xa2\x69\x07\x00\x60\x92\xa0\x26\x10\xc6\x44\x2a\xd4\x81\xf3\xee\xfa\xb5\xf7\xd2\xa9\x6e\x71\x92\x60\xe0\x2c\x29\xde\xa7\x42\x6a\x07\x42\xc1\x35\x72\x1d\x38\xf7\x34\xd2\x71\x10\xe1\x92\x86\xe8\xd9\x1f\x7d\xa0\x9c\x6a\x4a\x98\xa7\x42\xc2\x30\x18\xf9\xc3\x2d\x51\xb1\xd6\xa9\x87\x7f\x66\x74\x19\x38\xff\xef\xbd\x3b\xf1\xce\x44\x92\x12\x4d\x67\x0c\x2b\x72\x29\x06\x18\x2d\xb0\xe4\xd4\x54\x33\x9c\x5e\xa1\x4c\x08\x8d\x00\x23\xaa\x85\x9c\x0c\xf2\xd5\x9c\x42\x85\x92\xa6\x1a\x94\x0c\x03\xc7\x1c\xa1\xc6\x83\x41\xc6\xd3\xbb\x85\x1f\x8a\x64\x90\xe4\x9c\x3f\xfd\xe0\x8f\xfc\xe1\x20\xa2\x4a\x97\x4b\x7e\x42\xb9\xff\x51\x39\xd3\xc9\x20\x17\xb1\x47\x5e\x18\x19\xd2\x08\x19\x5d\x4a\x9f\xa3\x1e\xf0\x34\x19\xcc\x88\xc2\xef\x5f\x78\x1f\xd5\x4f\x23\xff\xd0\x1f\x15\xbf\x3f\xaa\x16\xc1\x93\x41\x6e\xf2\xce\x64\x26\xa2\x55\x71\x50\x44\x97\x10\x32\xa2\x54\xe0\x24\x84\xf2\x42\xe3\xfa\x16\xc3\xb9\xae\x6c\xd9\xed\x54\xe2\xf4\x5b\x3e\x53\xe9\xf1\x64\x60\x9e\xb7\x77\x35\x3e\x68\x22\x91\x00\x8d\x02\x87\xf2\x34\xd3\x06\x4a\xb9\x5a\x23\x36\x27\x19\x3a\x94\x52\x48\x67\x7a\x61\xbe\x26\x83\x88\x2e\xbf\xf4\xc8\x1a\x71\x15\xba\xa4\x8b\xb8\x81\x9d\x94\xbb\xf8\x90\x47\x94\x3d\xdd\x3e\x7b\x99\x64\x0e\x68\x22\x17\x26\x16\xff\x98\x31\xc2\xef\x1c\x88\x25\xce\x03\xe7\xb9\x33\xfd\xd7\x3f\xff\x31\x19\xd4\xf1\xef\x13\x97\x44\x7b\xa4\x9d\x89\x74\x05\x57\x44\xde\x45\xe2\x9e\x37\xe5\x96\x76\x59\x48\x92\xc6\xc6\x7e\xdb\x5a\xee\x56\x3a\x11\x12\x9b\x3a\x1b\x51\x8a\x24\x29\xc3\x61\x05\xc3\x6b\x26\xee\x6d\xf2\x69\x03\x00\x3e\xed\xe6\x1a\x55\xb8\xde\xe2\x9f\x19\xf2\x10\x3f\xc7\x73\x58\xe1\xf9\x99\x70\xbd\xe3\x90\x76\x0b\x95\x91\x5f\x24\xcb\x47\xe5\x2f\xa8\x8e\xb3\x99\x4f\xc5\x20\xc2\x44\x28\xdf\x94\x15\x67\x7a\x89\x44\x72\x30\x4a\x6f\xd9\xb0\x62\xa0\xea\x63\x35\xd1\xcc\x27\x14\x5c\x69\xc8\xe1\x2a\x08\xe0\x66\x0b\xdc\x07\x6b\x7c\xb8\x3e\xef\x9c\xdc\x9c\xc5\x92\x2a\x9d\x10\x75\x0b\x9e\x37\xfd\xf4\x33\x6a\x48\x04\xc7\xd5\x27\x38\x75\x7f\x16\xa0\x62\x91\xa6\x94\x2f\x7a\x9d\x53\xb3\x0f\x67\x8f\x97\x86\x02\x41\xc7\x94\xdf\x3d\x75\xce\x2c\xd7\xaf\x1c\x3f\xc1\xf9\xcd\x25\x49\xb5\x48\x6f\x8b\xc5\xeb\x7b\xf1\x09\x2e\x6e\xe8\x6f\xb1\xe0\xb8\x5e\x8c\x25\xe2\x27\x78\x7d\x73\x46\xe4\x6d\xe7\x43\x7f\x1b\x97\x2a\x3c\x70\x4e\xc9\x42\x92\xa4\x73\xc2\x68\x88\xe0\x4d\xa7\x70\x2a\x66\x63\x78\x83\x8c\x09\xf3\xd8\x87\x58\xdc\x03\x91\x08\x2b\x91\xbd\xea\x9c\x8a\x99\xe7\x4d\xa7\xff\x2d\x62\x3e\x86\x37\x66\x67\x26\x32\x6d\xf6\xc0\xac\x15\x04\x0f\x60\xc5\x8d\xe1\x17\x20\x09\x2c\x84\x88\x40\xc7\x84\xdf\xa9\x67\x76\xff\x01\x72\xfe\xe6\xee\xff\x08\x8d\x60\x73\x0e\xc4\xbc\xa0\x3a\x15\x33\xa0\x2a\xb7\x02\xe5\x0b\xbf\x53\x80\x28\x8e\x38\x8b\x31\x34\xeb\x70\x4f\x75\x6c\x59\x7c\xdf\xcf\xd5\xf1\x0a\x9c\xef\x51\xf9\xbe\x6f\xf7\x6a\xea\xd4\xad\xb2\x30\x31\xd6\xb1\xa5\x19\x4e\xc0\x46\x1c\x94\x16\x8a\x88\xc6\xd7\x42\x26\x44\x03\xbc\x7f\xff\xfe\xbd\x77\x75\xe5\x9d\x9f\x77\x14\x86\x9a\x0a\x0e\x6f\xf3\xef\xce\x09\x68\xa2\xee\x2a\x42\xc7\x64\xd4\x87\xc3\xe1\xe8\xa5\x37\x1c\x79\xc3\x51\x1f\x8e\x86\x51\xe7\x84\x0b\x1d\xa3\xdc\xd0\x8e\xc9\x5c\xa3\x84\x9c\x36\x5a\x4b\x2d\xe8\x3a\xd7\x86\x8e\x72\x50\x18\x16\x52\x4b\x89\xa3\xc3\x3e\x8c\x0e\xa3\x0e\x69\x48\x3c\x7c\x11\x75\x3e\xac\xf5\xbb\xed\xd4\x42\xf6\x9b\x54\xda\x80\x8d\x44\x98\x25\xc8\xb5\xff\x67\x86\x72\xf5\x16\x19\x86\x5a\xc8\x13\xc6\xdc\xae\x6f\x2a\x37\xa4\x12\xbb\xbd\x35\xb3\x65\xbb\x19\xde\xfa\x94\x73\x94\xd7\xf8\xa0\x21\x00\x67\x42\x93\x85\xed\x37\x5d\x07\x0e\x60\x96\x51\x16\xbd\x93\xcc\xad\xb3\x8d\x6a\x6c\xdd\xa9\xb3\x81\xc5\x50\x83\x44\x1e\xa1\x34\xee\x0c\x60\x4e\x98\xc2\xe3\x3a\x6a\xdb\x0d\xaa\xb0\x17\xa8\x2f\x18\x9a\xc7\xd3\xd5\x2f\x91\xdb\xb5\x04\xdd\x5e\x43\xdd\xbc\xa2\x5e\x45\xfb\x78\xd7\x55\xb7\xaa\x70\xc9\xe8\x93\x28\xba\x58\x22\xd7\x97\x54\x69\xe4\x28\xdd\x6e\xc8\x68\x78\xd7\xed\x83\x8b\x66\xbd\x07\xc1\x14\x1e\xb7\x22\xca\xae\xfb\xa9\xb4\xdf\xe7\x38\x27\x19\xd3\x15\xab\x6c\xe0\x2d\x09\xcb\x10\x82\x42\x3f\xdf\xfe\xf4\x55\xca\xa8\x76\xbb\xbf\xf3\xee\x36\x8b\xf9\xf8\x09\x49\x5d\x97\x51\x8e\x2d\xc7\x96\x1f\x3a\x07\x4b\xe2\x6b\x49\x13\xb7\x07\x41\x10\x40\xb7\xdb\x03\x89\x3a\x93\x1c\xba\xdd\x56\x2e\xe3\x08\x06\x01\xac\x39\xff\xd7\x64\xa4\xdb\xc4\x60\x3e\x85\x28\xe6\x23\x8f\xd4\xff\x51\x1d\xbb\xdd\xe3\x6e\x0f\x5e\x01\x83\x31\x30\x38\x80\xee\x71\xf3\x94\xa7\x16\x7d\xe6\x94\x69\x94\x15\x95\xec\x43\x93\xee\xa3\xa0\xbc\xc5\x26\x55\xc3\x41\x90\xdb\xb3\xb3\x45\x91\xa5\x26\x85\x2f\xac\x37\x6b\xca\xe4\x61\x57\x5b\xe4\x64\x49\x17\x44\x0b\xe9\xa7\x28\x13\xaa\x14\x15\x5c\xe5\x59\xe2\x3e\x9a\xa1\x72\x0c\x4e\xc8\x68\x3a\x13\x44\x46\xde\xbd\xa4\x1a\x9d\xa7\x9e\xaf\x63\xe4\xae\x2b\x51\x65\xac\x2d\x22\x4a\xb7\xe4\x04\xbe\xd2\x44\x23\x3c\x0b\x02\x30\x7d\x9a\x6b\x8c\x1c\xf8\xf6\x5b\x68\xee\xa6\x52\x24\xa9\x76\x7a\x3b\x3c\x4d\x18\x4a\xed\x76\xcf\x08\x07\x2e\x34\x84\x66\x34\xd0\x02\xd6\xf8\x9e\xb5\x84\xd0\xc6\x7d\x4d\x07\x35\x56\xf2\x30\x8d\x88\x26\x10\xe4\x09\x7e\x15\xb9\xd6\xca\x4d\xc1\x45\x4c\x6c\x0c\xb8\x86\xe1\x5b\x33\x99\xf4\x77\x8d\xa8\xd2\x5a\xd6\x4e\x9b\x44\xab\xd6\x88\xee\x99\x48\x29\x36\xf0\x3f\xf5\xfc\x90\xe8\x30\x76\x5d\x94\xd2\xb2\xe7\x16\xf8\xb0\xd3\x02\x63\xf8\xe6\x11\xa5\x7c\x7a\xf6\xa1\xd7\xdb\x54\x95\xa7\x4a\xa1\x28\x42\xc8\x9e\xfe\xe6\xfa\xea\x12\x82\xb2\xaf\xdf\x0c\x6f\xd7\x54\x73\x21\xc1\x35\x29\x42\x21\x80\xe1\x31\x50\x98\x94\x64\x3e\x43\xbe\xd0\xf1\x31\xd0\x83\x83\xba\xa3\x76\xd6\x9c\x9c\xb7\x0b\x07\x40\x5b\xa2\xfd\x2b\x6a\x4e\xf9\xf9\x82\xda\x53\xd3\xbc\x4c\x9e\x52\x6b\x7a\xdb\x4a\xbd\x27\x91\x36\x11\xd0\x92\x50\xb0\x9d\xf9\x4f\x0d\xcb\x0b\x7e\x87\x2b\x33\xcc\x42\x00\x6e\x8b\x66\x0a\xf5\x35\x4d\x50\x64\xda\x6d\xdb\xfe\x02\x6c\x26\xf3\x9e\xad\x9b\xcc\xae\x64\xaa\x76\x21\x2d\x33\x6c\x25\xaa\x80\xc9\xe9\xfb\xf0\xdd\xb0\x45\xe1\xed\xb0\xdd\x26\xaa\x98\xa0\xbc\xd2\x15\x17\x50\xfa\x17\xba\x8f\xa0\x34\x91\xfa\x57\x7e\x29\x48\x34\xce\xfb\x61\xd5\x80\x3b\x74\x6d\x01\x36\xec\x6d\xb7\xd9\x50\x64\x5c\xdb\xf0\xdd\x84\x75\xc6\xf3\x91\xa3\x74\x5d\xcd\x36\x5a\xae\x5a\xac\x95\x57\x05\x3b\xe4\x9e\xe3\xdc\x62\x17\xbc\xd6\xc6\x1a\x4c\xa5\xaa\xa9\xb9\xb2\xbb\x35\xe6\x5e\xa7\xe5\x90\x8c\xeb\x83\x83\x9d\x72\x0a\xc4\x5d\x2b\xc9\x24\x92\x65\xe8\xd7\x61\x99\xcb\xbd\x42\xa9\xdf\x2e\x17\x4d\x37\xa9\x58\xdc\xdb\x9b\xa3\x5b\x03\xf0\x04\xb6\xce\x80\x8b\x6d\xd1\xb2\x61\xab\x95\xc1\xa7\x96\xfe\x52\x19\x6b\xda\x22\x60\xed\x81\x35\x4c\x57\x2d\x17\x67\x22\xc2\x3e\xcc\x28\x8f\x5e\x17\xfb\xaa\x0e\xa4\x18\x70\xf2\xab\xc6\x9e\xe9\x26\xb7\x4f\xad\x6d\xda\xc5\xed\x9a\x97\x1f\xba\x17\x62\x45\x6f\x53\x7e\x5b\xf1\xd8\xfb\xf8\xde\x69\xcb\x10\x74\x6b\xf6\xb6\x19\xda\x22\xd4\x82\xb5\x1c\xdb\xed\xa1\x39\x5c\x14\x54\x4a\xaf\x18\xfa\x4b\xaa\xe8\x8c\x32\xaa\x57\x86\x38\xa6\x51\x84\xbc\xc9\xd2\xd2\x05\x9f\xb6\x61\xb5\x1c\x8d\xd2\x1c\x22\xe1\x95\xa9\x11\x3c\x5c\x9b\xc3\x2c\xf6\x60\x6c\xf7\x13\x54\x8a\x2c\xb0\x4d\x54\x1b\x3e\xfb\x8b\x61\x77\xaf\xed\x2b\xa7\x35\x42\xc1\x26\xf7\x76\x62\xc3\xae\x9e\xb5\xaf\x5b\x95\x9e\x30\x3d\x00\xcc\xd0\x68\xe6\x2d\x08\x5b\x92\xd0\x50\x85\x86\xe4\x68\x77\x35\xb5\xd3\x80\xf2\x95\xb9\x94\xb9\xc3\x7e\x5b\xa3\x7b\xda\x9b\x3d\xb9\x80\xbd\x56\xc9\x5f\x5d\x5d\xf0\x50\x44\x94\x2f\xde\x5d\xbf\x7e\xe9\x5a\x3f\xb4\x85\x26\x1a\x2a\x34\x37\x01\x8e\xf7\x60\xdc\x69\xf9\x4c\x0d\xc9\xf4\xdc\x7b\xd9\xed\xf9\x39\x89\x15\x71\xdc\x22\x61\x56\x1c\x65\x85\xac\xdf\x9a\xcd\xa5\x48\x4e\x57\x1a\x4f\xa4\x24\x2b\xb7\x38\xa5\xc6\x5f\x28\xb3\x11\x70\xbc\x57\xad\xed\x1a\xbf\x23\xd1\xec\xee\x3b\xc9\xbe\xe0\x6a\x93\x49\x56\xaf\x00\x6b\x76\x3f\x96\x38\x37\x61\x38\x88\xf2\x3b\xef\xc0\x14\xd3\x16\xc3\x56\xab\x7b\xcb\xcc\x22\x31\x65\x24\x44\x77\xf0\xfb\xc1\x60\xd1\x87\xae\xd7\xed\x55\xd6\x06\x76\xed\x8f\xea\x5a\x70\x30\xe8\x9b\x7b\xc9\x7e\x07\xaf\x2f\x95\x35\x2b\x94\x37\x10\x11\x12\x43\xe8\xa7\x52\x68\x11\x0a\x7b\xf7\x18\x58\x15\xd6\x5b\xb1\x50\xda\x2e\x2f\x5e\xed\xcf\xb1\x72\xc0\xb5\x8a\xee\x38\xb0\xe5\x26\x7c\x60\x13\xc5\x8c\x72\xf6\x96\xba\xfe\xd9\xbc\xfd\x56\x4e\x07\xfb\x86\x69\xfb\x05\xae\xa9\x0d\x9b\x77\x4c\xb1\x4e\xd8\xe6\x4d\xc5\x4c\x44\xf5\x56\x1c\xa3\xb9\xa1\x8d\x61\x34\x1c\xfe\xd7\x76\xb8\x25\x44\x2e\x28\x1f\xd7\x0b\x42\xa6\x50\x7a\xca\xde\xf5\xc7\xc0\x05\xc7\xd6\x28\xf4\x13\x42\x79\xed\x28\xfb\x9e\xbc\xed\xa4\xdd\x18\x22\xaa\x52\x46\x56\x63\x98\x33\x7c\xd8\xde\x4a\x85\xb2\xbd\x79\x0c\x12\x19\xd1\x74\xb9\x0b\x88\x90\x58\x03\xb2\x61\x25\x33\x25\x58\xa6\xb1\x96\x68\x39\x9c\x9a\xe2\x5a\xa4\x8d\xb5\x94\x44\x26\xb4\x0d\xf4\xf4\x01\x0e\x87\xe9\x43\x3b\x08\xfb\x36\xe4\xf1\x4b\x55\x33\x2b\x63\x30\x12\x8f\x1a\xe5\x98\xe1\x83\x17\x51\x99\xbf\xe4\x19\x43\x28\x58\x96\xf0\x76\xc7\x1d\x96\x98\x36\x7f\xbe\xce\x84\xf9\x6b\xb5\xaf\x80\xff\x5d\x1d\x7e\x15\xda\xd7\x61\x29\xdf\x2b\xd5\xe0\x6c\x45\xa5\xc6\x07\xdd\xca\xfd\x3c\x1f\x74\x1e\x77\xc0\x1d\x35\x5c\x8e\x0f\xda\x23\x8c\x2e\x8c\xa5\x91\x6b\x94\xed\x62\xf3\x9c\xfd\x62\xb1\x73\xc1\xb5\x37\x27\x09\x65\xab\x31\x38\x97\x59\x48\x23\x02\x67\x82\x2b\xc1\xd0\xe9\xc3\x95\xe0\x24\x14\x7d\x48\x04\x17\x2a\x25\x21\xb6\x70\x2b\xfa\x17\x8e\xe1\xc7\x54\xef\x88\xc7\x8d\xdb\x47\x3b\x9c\x2f\x31\x97\xb1\x9d\xc2\x7f\xc3\x96\xf9\x90\xf6\xf7\x32\xcb\x78\xaf\x91\x44\xed\xe9\x36\x13\x5a\x8b\x64\x77\xc6\x35\x35\xda\x67\x98\xff\x80\xc9\xef\x8b\x2a\x35\x13\x2c\xaa\x37\x76\x26\xe4\x18\x9e\x87\xc3\xba\x0e\x24\xbc\x5b\x48\x91\xf1\x68\x0c\xcf\xe7\x58\x93\xba\x19\xe0\xc6\x90\x8f\x97\xed\x21\x9f\x77\xd9\x7a\x78\x55\x15\x3a\x91\x94\xb0\x3e\xbc\x41\xb6\x44\x4d\x43\xd2\x07\x45\xb8\xf2\x14\x4a\x3a\xdf\x69\xa3\x97\x8d\xe0\xf9\x8c\xf3\xda\x0a\x60\xee\x50\xef\xa8\xe1\x8c\xd2\x26\xf3\xf9\x7c\x87\x03\x5f\xda\xe0\xac\xf3\xad\x7b\xc1\x51\x43\x62\x26\x95\x11\x99\x0a\xba\x9d\x89\x50\x66\x6a\x84\xa1\x90\x24\x57\xa1\x19\xd6\x22\xd3\x8c\xf2\xd6\x88\xdf\xf8\xc9\x2b\x70\xcb\xc5\xcc\x1d\x7d\xdf\x87\xd1\x8b\xc3\x3e\x1c\x1e\x1d\xf5\xea\xc1\x29\x23\x94\x7f\x8f\x58\x92\x88\x66\x6a\x0c\x2f\x76\x34\x89\xe7\x9b\x39\xab\x31\x9a\xb7\x18\xb9\x85\x33\x89\x5a\x19\x47\x9f\xe1\x1b\xc7\x62\x89\xf5\x4c\x6e\x37\xc9\x0f\x47\x7d\x18\x7d\xff\xa3\xd1\xf2\xe5\x67\x4d\xb2\x83\x78\x3d\xb6\xe4\x93\xca\x64\x90\xff\x57\xb8\x33\x19\xe4\xff\xb2\xff\x77\x00\x00\x00\xff\xff\x7f\x23\x5b\x09\xc3\x1f\x00\x00")

func index_html() ([]byte, error) {
	return bindata_read(
		_index_html,
		"index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"index.html": index_html,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"index.html": &_bintree_t{index_html, map[string]*_bintree_t{
	}},
}}
