// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdb\x72\xdb\x38\xd2\xbe\xe7\x53\x74\x94\xff\x2f\x49\x65\x92\x3a\x38\x99\xc9\x30\xa2\x66\x7d\x4a\x32\x5b\xce\x66\xaa\xe2\xa9\x5a\x97\xc7\x35\x81\x88\x16\x89\x31\x09\x70\x00\x50\x96\x26\xf6\x8b\xec\xc5\x3e\xdc\x3e\xc9\x16\x08\xc9\xa2\x28\x52\x99\xa4\x56\x17\x16\x05\xf4\xe1\x43\xf7\xd7\x8d\xa6\x27\xcf\xce\x3f\x9c\x5d\x5d\xff\x7c\x01\x89\xce\xd2\xa9\x33\x31\x5f\x90\x12\x1e\x87\x1d\xe4\x9d\xa9\xe3\x4c\x12\x24\x74\xea\x00\x00\x4c\x32\xd4\x04\xa2\x84\x48\x85\x3a\xec\xfc\x72\xf5\xc6\x7b\xd5\xa9\x6e\x71\x92\x61\xd8\x59\x30\xbc\xcf\x85\xd4\x1d\x88\x04\xd7\xc8\x75\xd8\xb9\x67\x54\x27\x21\xc5\x05\x8b\xd0\x2b\x7f\xb8\xc0\x38\xd3\x8c\xa4\x9e\x8a\x48\x8a\xe1\xc8\x1f\xee\x98\x4a\xb4\xce\x3d\xfc\xa3\x60\x8b\xb0\xf3\x4f\xef\x97\x13\xef\x4c\x64\x39\xd1\x6c\x96\x62\xc5\x2e\xc3\x10\x69\x8c\x1b\x4d\xcd\x74\x8a\xd3\xf7\x28\x33\xc2\x28\x20\x65\x5a\xc8\xc9\xc0\xae\x5a\x09\x15\x49\x96\x6b\x50\x32\x0a\x3b\xc6\x85\x0a\x06\x83\x82\xe7\x77\xb1\x1f\x89\x6c\x90\x59\xcd\xbf\x7d\xef\x8f\xfc\xe1\x80\x32\xa5\x37\x4b\x7e\xc6\xb8\xff\xbb\xea\x4c\x27\x03\x6b\x62\xea\x4c\x06\x36\x32\xce\x64\x26\xe8\x6a\x6d\x9f\xb2\x05\x44\x29\x51\x2a\xec\x64\x84\xf1\x35\xb0\xfa\x56\x8a\x73\x5d\xd9\xb2\xd8\x71\xa9\x89\x44\x02\x8c\x86\x1d\xc6\xf3\x42\x1b\x67\x9b\xd5\x9a\xb0\xb1\x65\xe4\x50\x4a\x21\x3b\xd3\x0b\xf3\x35\x19\x50\xb6\xa8\xf8\xab\xfd\xac\xb8\x97\x2c\x4e\xf6\xfc\x5b\xc7\xb8\xb4\x99\xd3\x44\xc6\x26\xc7\xbf\xcd\x52\xc2\xef\x3a\x90\x48\x9c\x87\x9d\xe7\x9d\xe9\x7f\xfe\xfd\xaf\xc9\xa0\x0d\x4e\x2c\x49\x9e\x18\xd8\x7f\x15\x49\x26\x24\x36\x03\x51\x24\xcb\x53\x1c\x56\x3c\xbf\x49\xc5\x7d\x49\x3e\x6d\x00\xc0\x43\xbb\xd6\xa8\xa2\xf5\x11\xff\x28\x90\x47\xf8\x25\x9d\x71\x45\xe7\x2d\xe1\xba\xc5\x49\x73\x5c\x36\x4c\x5a\x93\xe5\x77\xe5\xc7\x4c\x27\xc5\xcc\x67\x62\x40\x31\x13\xca\x37\x65\xd5\x99\x5e\x22\x91\x1c\xcc\xa1\x77\x62\x58\x09\x50\xf5\x71\x43\xb4\x8d\x58\x24\xb8\xd2\x60\xe1\x2a\x08\xe1\x66\x07\xdc\xa7\x32\xf8\x70\x75\xee\x9c\xdc\x9c\x25\x92\x29\x9d\x11\x75\x0b\x9e\x37\x7d\x78\x8b\x1a\x32\xc1\x71\xf5\x00\xa7\xbd\xb7\x02\x54\x22\xf2\x9c\xf1\xb8\xef\x9c\x9a\x7d\x38\xfb\x7c\x69\x24\x10\x74\xc2\xf8\xdd\xa3\x73\x56\x6a\x7d\xe0\xf8\x00\xe7\x37\x97\x24\xd7\x22\xbf\x5d\x2f\x5e\xdd\x8b\x07\xb8\xb8\x61\x3f\x27\x82\xe3\xd3\x62\x22\x11\x1f\xe0\xcd\xcd\x19\x91\xb7\xce\x27\x77\x17\x97\x5a\x67\xe0\x9c\x91\x58\x92\xcc\x39\x49\x59\x84\xe0\x4d\xa7\x70\x2a\x66\x01\xbc\xc3\x34\x15\xe6\xd1\x85\x44\xdc\x03\x91\x08\x2b\x51\xfc\xe8\x9c\x8a\x99\xe7\x4d\xa7\x7f\x17\x09\x0f\xe0\x9d\xd9\x99\x89\x42\x9b\x3d\x30\x6b\x6b\x81\x25\x94\xe6\x02\xf8\x09\x48\x06\xb1\x10\x14\x74\x42\xf8\x9d\x7a\x56\xee\x2f\xc1\xea\xef\xef\xfe\x43\x68\x84\xb2\x10\x40\xcc\xd7\x52\xa7\x62\x06\x4c\xd9\x28\x30\x1e\xfb\xce\x1a\xc4\xda\xc5\x59\x82\x91\x59\x87\x7b\xa6\x93\x52\xc5\xf7\x7d\x7b\x1c\x6f\x8d\xf3\x1a\x95\xef\xfb\xe5\x5e\xed\x38\xf5\xa8\xc4\x86\x63\x4e\xd9\x9a\xe0\x04\x4a\xc6\xc1\x26\x42\x94\x68\x7c\x23\x64\x46\x34\xc0\xf5\xf5\xf5\xb5\xf7\xfe\xbd\x77\x7e\xee\x28\x8c\x34\x13\x1c\x3e\xda\x6f\xe7\x04\x34\x51\x77\x15\xa3\x01\x19\xb9\x30\x1e\x8e\x5e\x79\xc3\x91\x37\x1c\xb9\x70\x3c\xa4\xce\x09\x17\x3a\x41\xb9\x95\x0d\xc8\x5c\xa3\x04\x2b\x4b\x9f\xac\xae\xe5\x9c\x2b\x23\xc7\x38\x28\x8c\xd6\x56\x37\x16\x47\x63\x17\x46\x63\xea\x90\x3d\x8b\xe3\x17\xd4\xf9\xf4\x74\xbe\x5b\xc7\x79\x7a\x5e\x10\x09\x12\x39\x45\x69\x02\x17\xc2\x9c\xa4\x0a\x6b\x8c\xfe\xbf\xb2\xdb\x41\x08\x54\x44\x45\x86\x5c\xfb\x31\xea\x8b\x14\xcd\xe3\xe9\xea\x27\xda\xeb\x96\x02\xdd\xfe\xd6\xac\x55\xf1\x19\xe7\x28\xdf\x5d\xbd\xbf\x84\x70\x53\x17\x37\xc3\xdb\x27\xa9\xb9\x90\xd0\x4b\x51\x03\x83\x10\x86\xaf\x81\xc1\x64\x23\xe6\xa7\xc8\x63\x9d\xbc\x06\x76\x74\xd4\x87\xcf\x3b\xb9\x69\x85\x61\x75\xbb\x70\x04\xac\xbf\xa3\x61\x3e\x3e\xa1\xf4\x62\x81\x5c\x5f\x32\xa5\x91\xa3\xec\x75\xa3\x94\x45\x77\x5d\x17\x7a\x68\xd6\xfb\x10\x4e\x6b\x9e\x36\x9f\x72\xdf\xcf\x65\xf9\x7d\x8e\x73\x52\xa4\xba\xb7\xef\xa2\x72\xf2\x05\x49\x0b\xac\x9c\x9a\xdd\x36\x4a\x17\xb9\xe1\xd2\x45\xd9\xd4\x5b\x0c\xda\xec\x34\x6c\x3e\x6e\x97\x1e\xf7\x22\x2f\xf8\x1d\xae\xa8\xb8\xe7\x10\x42\xaf\xe1\x64\x07\x1c\xb3\x39\xf4\x9e\x3d\x71\xa2\x1e\xfc\x2d\x24\x4b\x18\x2d\x0b\xdc\x13\x50\xa8\xaf\x58\x86\xa2\xd0\x3d\x2b\xeb\xc2\xcb\xe1\xae\x97\xc7\x26\xf0\x9b\xcb\x7c\x3d\x7a\xb0\x3f\xb1\xb7\xeb\x5d\x69\x22\xf5\x07\x7e\x29\x08\x0d\x6a\x5c\xad\x84\xa3\xe5\x70\x0d\xa8\x86\xfd\xdd\x52\x88\x44\xc1\x0d\xd3\x87\x5b\x8e\x16\xdc\xd6\xdf\x26\x0f\xb5\x78\x68\xb9\x6a\x88\x90\x2d\x9c\xb2\xe3\x9f\xe3\xbc\x3c\x8e\x30\xa9\xa8\xb2\x63\x4f\x69\x73\xfa\xdc\xcc\x6f\xbd\x9a\x72\x05\xe8\xd6\x49\xc1\xf5\xd1\x51\xab\x9d\x35\xe2\x6e\x69\xc9\x54\x45\xa9\xe0\xd6\x61\x99\x49\x4f\xa1\xd4\x1f\x17\xf1\x3e\xc9\x54\x22\xee\xcb\xe9\xa5\x57\x03\xf0\x08\x11\xd1\x51\x02\x3d\x6c\x62\xc8\x56\x0d\xdb\xd2\x0e\x35\x22\xd5\xb2\xe9\xec\x67\xe0\x09\x66\x4f\x2d\xe2\x33\x41\xd1\x85\x19\xe3\xf4\xcd\x7a\x5f\xd5\x81\xac\xbb\x97\xbd\x77\x0f\x74\x2f\x1b\x9f\x5d\x9c\x56\x6b\xb7\x81\x59\xa7\x07\x21\x56\xce\x2d\x65\x0b\x9e\x72\x26\x3c\x84\xa7\x14\xe8\xd6\xe2\x5d\x56\x65\x83\xd1\x12\x6c\xa9\x61\xc1\x5e\xe1\xd2\x10\xb8\xdb\x6d\x93\x52\x7a\x95\xa2\xbf\x60\x8a\xcd\x58\xca\xf4\xca\x08\x27\x8c\x52\xe4\xfb\x2a\x12\x75\x21\x79\x2d\x81\xce\x17\x5c\xa3\x34\x4e\x24\xfc\x68\x7a\x03\x8f\x9e\xc2\x61\x16\xfb\x10\x94\xfb\x19\x2a\x45\x62\x6c\x32\xd5\x84\xaf\xfc\x95\x62\xf7\x60\xec\x2b\xde\xf6\xa8\x60\x2e\x99\xa8\xbc\x64\x76\x96\x1b\x2f\xa0\x43\x57\xcf\x26\x13\xa6\xa1\x43\x18\x42\xf7\x57\xde\xed\x43\xd4\x50\x84\x46\x2a\x32\x22\xc7\x4d\x36\xb6\xc1\x05\xe5\x2b\x33\xa1\xf4\x86\x6e\xd3\xad\xf5\x78\xb0\x7a\xac\x81\x83\x51\xd9\xed\x85\x2d\x8c\x2c\x77\x0f\x52\xb2\x94\xa8\xd7\x88\x5d\xf5\xcd\x8c\x6d\xb2\x34\xa0\x76\x3e\x1a\x98\x5e\x33\xd3\x82\xf4\xaa\xed\xae\xe1\x46\x96\x98\xa7\x24\xc2\xde\xe0\xd7\xa3\x41\xec\x42\xd7\xeb\xf6\x2b\x6b\x83\x72\xed\xb7\xea\x5a\x78\x34\x70\xa1\xdb\xad\x5e\x7c\x50\x0e\xe5\xd5\x51\x7c\x52\x32\x68\x3b\x96\x9b\xd1\x7e\x3b\xdc\x99\x77\xc1\x5a\x14\x12\x34\x63\x66\x00\xa3\xe1\xf0\xff\x77\xf9\x91\x11\x19\x33\x1e\x54\x69\x53\x89\xb1\x6f\xde\x20\x6b\xb6\xca\x77\xe7\x26\x53\xed\x4e\x28\x53\x79\x4a\x56\x01\xcc\x53\x5c\xee\x6e\xe5\x42\x95\x2d\x3a\x00\x89\x29\xd1\x6c\x81\x2d\x40\x84\xc4\x1a\x90\xad\x2a\x99\x29\x91\x16\x1a\x77\x4d\x4b\x0b\xa7\x56\x10\x5a\xe4\x7b\x6b\x39\xa1\x94\xf1\xd8\x40\xcf\x97\x30\x1e\xe6\xcb\x66\x10\xe6\xa5\xb9\x3e\xa9\xb5\x1f\xcd\xac\x04\x60\x2c\x1e\xef\x55\x65\x8a\x4b\x8f\x32\x69\x07\xdf\x00\x22\x91\x16\x19\x6f\xce\xcc\x78\x83\x69\xfb\xe7\xdb\x42\x68\x5f\x35\xbe\x01\xfe\xcb\x3a\xfc\x2a\xb4\x6f\xc2\xf2\xdc\xde\x58\x9f\x5b\x1c\x8e\xf6\x92\x86\x4b\xed\x91\x94\xc5\x26\x56\xc8\x35\xca\x66\xb3\x76\x8c\xff\xcb\x66\xe7\x82\x6b\x6f\x4e\x32\x96\xae\x02\xe8\x5c\x16\x11\xa3\x04\xce\x04\x57\x22\xc5\x8e\x0b\xef\x05\x27\x91\x70\xcd\x8b\xab\x50\x39\x89\xb0\x41\x5b\xb1\x3f\x31\x80\x1f\x72\xdd\xc2\xa8\x6d\xe2\x46\x2d\xe9\x93\x68\x6d\x70\xc1\x5b\x82\x65\xaf\xd3\xaf\x23\xbf\xa1\xea\x1e\xcf\x9b\x2b\x62\x26\xb4\x16\x59\x7b\x51\xec\x43\x3e\x74\xf2\xff\x41\x4c\xef\xd7\x8d\x64\x26\x52\xfa\xba\xd6\xcd\x53\x21\x03\x78\x1e\x0d\xeb\x67\x20\xd1\x5d\x2c\x45\xc1\x69\x00\xcf\xe7\x58\xb3\xba\xbd\x6a\x03\xb0\x83\x40\x4b\xa0\xed\x2d\xf1\xb9\xfd\x40\x27\x92\x91\xd4\x85\x77\x98\x2e\x50\xb3\x88\xb8\xa0\x08\x57\x9e\x42\xc9\xe6\x5f\xc1\x8e\x2f\x24\xaf\xa9\x47\xd9\x84\x7a\xc7\x7b\xc9\xd8\xc4\x64\x3e\x9f\xb7\x24\xf0\x55\xc9\xbe\x3d\xbd\x42\x2a\xa3\x98\x0b\xb6\x5b\x50\xb0\x29\x38\x8a\x91\x90\xc4\x02\xdd\x65\xa7\xf9\x88\x42\xa7\x8c\xef\x11\xb7\x02\x49\xc6\xb3\xde\xf8\xe5\x4b\x17\x36\x7f\xfa\x6d\x49\xf3\x2a\x1a\xa3\xef\x5c\x18\xbd\x18\xbb\x30\x3e\x3e\xae\x2b\x08\x49\x51\x7e\x9d\xb0\x24\x94\x15\x2a\x80\x17\x2d\x4d\x7d\x9d\xf4\x20\x11\x0b\xac\x17\x59\x33\xc0\xef\x8f\x5d\x18\x7d\xf7\x83\xf1\xf9\xea\x8b\x00\x5b\x84\x9f\x6e\x75\x7b\x91\x4f\x06\xf6\x1f\xb8\xce\x64\x60\xff\x09\xfe\xdf\x00\x00\x00\xff\xff\x61\x89\x43\x28\x15\x17\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 5909, mode: os.FileMode(420), modTime: time.Unix(1509029895, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

